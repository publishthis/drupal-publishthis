<?php

/**
 * Implementation of hook_init
 */
function publishthis_init() {
  global $pt_settings_value;
  global $pt_client_info;
  
  if( $cache = cache_get('pt_client_info') ) {
    $pt_client_info = $cache->data;
    if( time() - $cache->expire > 0 ) {
      cache_clear_all($cache->cid, 'cache');
      $pt_client_info = reset_client_info();
    }
  }
  else {
    $pt_client_info = reset_client_info();
  }

  // Include common settings file
  include drupal_get_path('module', 'publishthis') . '/publishthis-settings.php';
  // css uses to manage fields style
  drupal_add_css(drupal_get_path('module', 'publishthis') . '/assets/css/publishthis.admin.css');

  $query_params = drupal_get_query_parameters(null, array());
  if( count($query_params) == 1 && $query_params['q']=='pt_endpoint') {
    init_pt_endpoint();
    exit;
  }
    
  // common js
  drupal_add_js(drupal_get_path('module', 'publishthis') . '/assets/js/publishthis.js');

  //Add Tweeter widget js
  drupal_add_js( 'http://platform.twitter.com/widgets.js' );
}
if(!function_exists('pa')){
	function pa($mixed, $stop = false){
		$ar		= debug_backtrace();
		$key	= pathinfo($ar[0]['file']);
		$key	= $key['basename'] .':'. $ar[0]['line'];
		$print	= array($key => $mixed);
		echo '<pre>'. print_r($print, 1) .'</pre>';
		if ($stop == 1) exit();
	}
}
function reset_client_info() {
  $objApi = new Publishthis_API();
  $pt_client_info = $objApi->get_client_info();
  //set cache for 2 minutes
  $cache_time = '+2 minutes';
  $expire = strtotime($cache_time, time());
  cache_set('pt_client_info', $pt_client_info, 'cache', $expire );
  return $pt_client_info;
}
/**
 * Publishthis menu items
 * Implementation of hook_menu
 */
function publishthis_menu() {

  $items = array();
  
  $items['admin/config/system/publishthis/settings'] = array(
    'title' => 'Settings',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10
  );
  
  $items['admin/config/system/publishthis'] = array(
    'title' => 'PublishThis',
    'description' => 'Configure PublishThis Curation Module',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('publishthis_settings'),
    'access arguments' => array('administer site configuration'),
    'file' => 'publishthis.admin.settings.inc',
    'file path' => drupal_get_path('module', 'publishthis') . '/admin'
  );

  $items['admin/config/system/publishthis/publishing-actions'] = array(
    'title' => 'Publishing Actions',
    'type' => MENU_LOCAL_TASK,
    'page callback' => array('publishthis_publishingactions'),
    'access arguments' => array('administer site configuration'),
    'file' => 'publishthis.admin.publishingactions.inc',
    'file path' => drupal_get_path('module', 'publishthis') . '/admin'
  );  
    
  $items['admin/config/system/publishthis/publishing-addactions'] = array(
    'title' => 'PublishThis',
    'type' => MENU_CALLBACK,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('publishthis_addnew_publishingactions'),
    'access arguments' => array('administer site configuration'),
    'file' => 'publishthis.admin.publishingactions.inc',
    'file path' => drupal_get_path('module', 'publishthis') . '/admin',
  );
  
  $items['admin/config/system/publishthis/publishing-editactions/%'] = array(
    'title' => 'Publishing Actions',
    'type' => MENU_CALLBACK,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('edit_publishthis_publishing_actions'),
    'access arguments' => array('administer site configuration'),
    'file' => 'publishthis.admin.publishingactions.inc',
    'file path' => drupal_get_path('module', 'publishthis') . '/admin',
  );
  
  $items['publishthis/publishing-actions/delete/%'] = array(
    'title' => 'Publishing Actions Delete',
    'type' => MENU_CALLBACK,
    'page callback' => 'delete_publishthis_publishing_actions',
    'access arguments' => array('administer site configuration'),
    'file' => 'publishthis.admin.publishingactions.inc',
    'file path' => drupal_get_path('module', 'publishthis') . '/admin',
  );

  
  $items['admin/config/system/publishthis/style-options'] = array(
    'title' => 'Style Options',
    'type' => MENU_LOCAL_TASK,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('publishthis_styleoptions'),
    'access arguments' => array('administer site configuration'),
    'file' => 'publishthis.admin.styleoptions.inc',
    'file path' => drupal_get_path('module', 'publishthis') . '/admin'
  );
  
  $items['admin/config/system/publishthis/log-messages'] = array(
    'title' => 'Publishing Log',
    'type' => MENU_LOCAL_TASK,
    'page callback' => 'publishthis_log_messages',
    'access arguments' => array('administer site configuration'),
    'file' => 'publishthis.admin.logmessages.inc',
    'file path' => drupal_get_path('module', 'publishthis') . '/admin',
    'weight' => 10
  );
  
  $items['publishthis/log-messages/delete/%'] = array(
    'title' => 'Log Messages Delete',
    'type' => MENU_CALLBACK,
    'page callback' => 'publishthis_log_messages_delete',
    'access arguments' => array('administer site configuration'),
    'file' => 'publishthis.admin.logmessages.inc',
    'file path' => drupal_get_path('module', 'publishthis') . '/admin',
  );
  
  $items['publishthis/log-messages/export/%'] = array(
    'title' => 'Export Log Messages',
    'type' => MENU_CALLBACK,
    'page callback' => 'publishthis_log_messages_export',
    'access arguments' => array('administer site configuration'),
    'file' => 'publishthis.admin.logmessages.inc',
    'file path' => drupal_get_path('module', 'publishthis') . '/admin',
  );
  
  return $items;
}

/*
* TODO: Implement WP Widgets here
*/
function publishthis_block_info(){
   
  $blocks = array();

  $blocks['pt_block_feeds'] = array( 'info' => t('PublishThis: Automated Feed Content'), 'cache' =>
   DRUPAL_NO_CACHE );
  $blocks['pt_block_savedsearches'] = array( 'info' => t('PublishThis: Automated Saved Searches Content'), 'cache' => DRUPAL_NO_CACHE );
  $blocks['pt_block_tweets'] = array( 'info' => t('PublishThis: Automated Tweet Content'), 'cache' => DRUPAL_NO_CACHE );
  $blocks['pt_block_topics'] = array( 'info' => t('PublishThis: Automated Topic Content'), 'cache' => DRUPAL_NO_CACHE );
 
  return $blocks;
}

function publishthis_block_configure($delta = '') {
  
  if( in_array( $delta, array('pt_block_feeds') ) ) {
    $form['pt_block_num_results'] = array(
      '#type' => 'select',
      '#title' => t('Number of Results to Display'),
      '#default_value' => variable_get($delta . '_num_results', 5),
      '#options' => drupal_map_assoc(array( 5, 10, 15, 20, 25, 30 )),
    );
    return $form;
  } 
}

function publishthis_block_save($delta = '', $edit = array()) {
  
  if( in_array( $delta, array('pt_block_feeds') ) ) {
    variable_set( $delta . '_num_results', $edit['pt_block_num_results']);
  }
  return;
}

/**
 * Implements hook_block_view().
 */
function publishthis_block_view($delta = '') {

  $blocks = array();
  switch( $delta ) {

    case 'pt_block_feeds':
      $blocks['subject'] = 'Automated Feed Content';
      break;

    case 'pt_block_savedsearches':
      $blocks['subject'] = 'Automated Saved Searches Content';
      break;

    case 'pt_block_tweets':
      $blocks['subject'] = 'Automated Tweet Content';
      break;

    case 'pt_block_topics':
      $blocks['subject'] = 'Automated Topic Content';
      break;

    case 'pt_block_poweredby':
      $blocks['subject'] = NULL;
      $blocks['content'] = theme('powered_by_publishthis');
      break;

    default: break;
  }
  //$blocks['content'] = theme('publishthis_block', array('content' => "{$blocks['subject']}"));
  
  return $blocks;
}

/**
 * Setup module blocks
 * 
 * Implements hook_theme().
 */
function publishthis_theme() {
  return array(
    'publishthis_block' => array(
      'variables' => array(
        'content' => NULL
      ),
      'file' =>  'blocks/publishthis.block.inc',
      'template' => 'blocks/publishthis-block',
      'file path' => drupal_get_path('module', 'publishthis') . '/blocks'
    ),
    'powered_by_publishthis' => array(
      'variables' => array( 'content' => NULL ),
    ),
  );
}

/**
 * Returns HTML for the Powered by curated publishthis logo
 *
 * @ingroup themeable
 */
function theme_powered_by_publishthis() {
  
  // Settings value
  $logo_settings = unserialize(variable_get('pt_settings'));  
  // Check curated option for footer
  if( isset($logo_settings['curatedby']) && $logo_settings['curatedby'] == 'footer' ) {
    
    $image_path = 'http://img.publishthis.com/images/ptbuttons/'.$logo_settings['curatedby_logos'];    
    return '<span> <img src="'. $image_path.'" alt="publishthis" /> </span>';
    
  }
}

/**
* Add Publishthis cron job for content import
*/
function publishthis_cron() {
  global $pt_settings_value;
  if( $pt_settings_value['curated_publish'] != 'import_with_cron' ) return;

  $objPublish = new Publishthis_Publish();
  $objPublish->run_import();
}

/**
* Delete docid when node is deleted
*/
function publishthis_node_delete($node) {
  db_delete('pt_docid_links')->condition('nid', $node->nid)->execute();
}

/**
* Process CMS endpoint request
*/
function init_pt_endpoint() {
  $objEndpoint = new Publishthis_Endpoint();
  $objEndpoint->process_request();
}

/**
* Hook to display custom styles and Publishthis logo when node is rendering
*/
function publishthis_node_view($node, $view_mode, $langcode) {
  global $pt_settings_value;
  $objUtils = new Publishthis_Utils();

  if( $pt_settings_value['curatedby'] == 'page' ) {
    $result = db_select('pt_docid_links', 'dl')
      ->fields('dl', array('docId','nid'))
      ->condition('dl.nid', $node->nid, '=')
      ->range(0,1)    
      ->execute()
      ->fetchAssoc();
    if( $result ) {
      $node->content['additional-text'] = array(
         '#markup' => $objUtils->getCuratedByLogo(),
         '#weight' => 100
      );
    }    
  }

  //render Publishthis custom css
  $css = $objUtils->display_css(false);
  drupal_add_css($css, 'inline');
}

/**
* Hook to display Publishthis logo when page is rendering
*/
function publishthis_page_alter(&$page) {
  global $pt_settings_value;
  global $pt_client_info;
  
  $objAPI  = new Publishthis_API();
   
  // Curatedby Logo
  $allowDisableLogo = false;
  if( is_object($pt_client_info) && !empty($pt_client_info) ) {
    $allowDisableLogo = $pt_client_info->allowDisableLogo;
  }
    
  //check that user can hide logo
  $default_placement = 'footer'; //display in 'Footer' option
  $placement = strlen( $pt_settings_value['curatedby'] ) > 0 ? $pt_settings_value['curatedby'] : $default_placement;
  $placement = $placement=='none' && !$allowDisableLogo ? $default_placement : $placement;

  if( $placement == 'footer' && !path_is_admin(current_path()) ) { 
    $objUtils = new Publishthis_Utils();
    $page['page_bottom']['publishthis_module']['#markup'] = $objUtils->getCuratedByLogo();     
  }

  pt_simulate_cron();  
}

/**
 * Simulate cron
*/


function pt_simulate_cron() {
  global $pt_settings_value;

  $objApi = new Publishthis_API();

  if( $pt_settings_value['curated_publish'] == 'import_without_cron' ) {
    // Return here is we want to pause polling.
    if ( $pt_settings_value['pause_polling']['Stop polling the API for new content'] ) {
      $objApi->_log_message( array( 'message' => 'Pause Polling', 'status' => 'warn', 'details' => '' ), "2" );
      return;
    }
    
    //modifying the logic here a bit and going with options, instead of
    //transients, because those were sometimes disappearing from
    //the wp cache. don't want to disrupt the clients site

    //basic algorithm
    // 1 - see if we are doing the cron all ready, if so, don't do anything
    // 2 - if not doing cron, get the last timestamp of when we did this cron
    //   -- we only want to check every XX minutes
    // 3 - if no time is set yet, we do the check
    // 4 - if the time is set, and we have not yet passed our XX minutes, we do not do anything
    // 5 - if we are doing the check, update that we are doing the cron
    // 6 - do the cron action
    // 7 - once completed, set
    //    - the timestamp we completed at, for future checks
    //    - remove the doing cron value

    $doingSimulatedCron = variable_get( 'pt_simulated_cron', false );
    //create lock flag if not exists and set it to 0 (false)
    if ( false === $doingSimulatedCron ) {
      variable_set( "pt_simulated_cron", 0 );
    }

    $doingSimulatedCron = intval($doingSimulatedCron);       
    
    //cron is not running
    if ( 0 === $doingSimulatedCron ) {
      //check the time
      $secondsExpiration = 60 * 2; //roughly 2 minutes. should be based on publishing action set poll times, but that would be too much to query;

      $timestamp = variable_get( 'pt_simulated_cron_ts', false );

      $currentTimestamp = ( time() ) * 1000;

      if ( !$timestamp ) {
        //this has never been set before, so, we can just assume we need to do the cron
        $timestamp = $currentTimestamp;
        
        //set the timestamp the first time
        variable_set( "pt_simulated_cron_ts", $timestamp );
      }
      //see if we need to do the cron
      $diffTimestamp = $currentTimestamp - $timestamp;
    
      $diffTimeSeconds = ( $diffTimestamp / 1000 );
   
      if ( $diffTimeSeconds >= $secondsExpiration ) {
        //ok, we need to do the cron action
        variable_set( "pt_simulated_cron", 1 );
 
        try {
          $objPublish = new Publishthis_Publish();
          
          //if we are here, that means we need to do the cron action
          //get only active Publishing Actions
          $actions = $objPublish->get_publishing_actions();

          $objApi->_log_message( array(
              'message' => 'Checking on simulated cron events',
              'status' => 'info',
              'details' => "Found " . count( $actions ) . " publishing events to check" ), "2" );
          
          // do import
          $objPublish->run_import();
        } catch (Exception $e) {
          //set simulate cron options on failure
          //leaving duplicated lines, because php4 doesn't have finally block
          variable_set( "pt_simulated_cron_ts", $currentTimestamp );
          variable_set( "pt_simulated_cron", 0 );
        }
      
        //now that we are done, set the old timestamp
        variable_set( "pt_simulated_cron_ts", $currentTimestamp );
        variable_set( "pt_simulated_cron", 0 );
      } 
    }     
  }
}