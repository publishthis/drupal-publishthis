<?php

/**
 * Implementation of hook_init
 */
function publishthis_init() {
  // TODO - optimize this - it is not needed to load on every page request
  // refactoring - replace global $pt_settings_value with
  // $pt_settings_value = publishthis_settings();
  global $pt_settings_value;
  // Include common settings file
  include drupal_get_path('module', 'publishthis') . '/publishthis-settings.php';

  // TODO - move twitter and css to hook_node_view
  // or hook_page_alter() if node comes from publishThis
  // publishThis styles
  if(!empty($pt_settings_value['styling']['enable_styling'])){
    drupal_add_css(drupal_get_path('module', 'publishthis') . '/assets/css/publishthis.general.css', array('group' => CSS_DEFAULT, 'every_page' => TRUE));
  }
  //Add Tweeter widget js
  drupal_add_js( 'http://platform.twitter.com/widgets.js' );
}

/**
 * Implements hook_theme().
 */
function publishthis_theme() {
  return array(
    'publishthis_addnew_publishingactions' => array(
      'render element' => 'form',
    ),
    'edit_publishthis_publishing_actions' => array(
      'render element' => 'form',
    ),
  );
}

function publishthis_preprocess_html(&$variables) {
  // Add conditional stylesheets for admin pages on admin theme.
  if (arg(0)=="admin") {
    // reference your current admin theme
    drupal_add_css(drupal_get_path('module', 'publishthis') . '/assets/css/publishthis.admin.css');
  }
}

function _publishthis_replace_unhandled_characters($string) {
  $connection = Database::getConnection();
  $utf8mb4_active = $connection->utf8mb4IsActive();
  $utf8mb4_supported = $connection->utf8mb4IsSupported();
  if (!$utf8mb4_active || !$utf8mb4_supported) {
    $special_charachters = array('“', '”', '’', '‘', '–', '©');
    $replacements = array('"', '"', '\'', '\'', '-', '&copy;');
    $string = str_replace($special_charachters, $replacements, $string);
    $string = utf8_encode($string);
  }
  return $string;
}

/**
 * Get tid from term name
 *
 * @retrun tid taxonomy
 */
function _get_tid_from_term_name($term_name, $vocabulary) {
  $arr_terms = taxonomy_get_term_by_name($term_name, $vocabulary);
  if (!empty($arr_terms)) {
    $arr_terms = array_values($arr_terms);
    $tid = $arr_terms[0]->tid;
  }
  else {
    $vobj = taxonomy_vocabulary_machine_name_load($vocabulary);
    $term = new stdClass();
    $term->name = $term_name;
    $term->vid = $vobj->vid;
    taxonomy_term_save($term);
    $tid = $term->tid;
  }
  return $tid;
}

/**
 * Publishthis permissions
 * Implementation of hook_permission
 */
function publishthis_permission() {
  return array(
    'administer publishthis module' => array(
      'title' => t('Administer publishThis module'),
      'description' => t('Allow users to access publishThis settings page'),
    ),
  );
}

/**
 * Publishthis menu items
 * Implementation of hook_menu
 */
function publishthis_menu() {

  $items = array();

  $items['admin/config/publishthis/settings'] = array(
    'title' => 'Settings',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10
  );

  $items['admin/config/publishthis'] = array(
    'title' => 'PublishThis',
    'description' => 'Configure PublishThis Curation Module',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('publishthis_settings'),
    'access callback' => 'publishthis_administer_access',
    'access arguments' => array('administer'),
    'file' => 'publishthis.admin.settings.inc',
    'file path' => drupal_get_path('module', 'publishthis') . '/admin'
  );

  $items['admin/config/publishthis/publishing-actions'] = array(
    'title' => 'Publishing Actions',
    'type' => MENU_LOCAL_TASK,
    'page callback' => array('publishthis_publishingactions'),
    'access callback' => 'publishthis_administer_access',
    'access arguments' => array('administer'),
    'file' => 'publishthis.admin.publishingactions.inc',
    'file path' => drupal_get_path('module', 'publishthis') . '/admin'
  );

  $items['admin/config/publishthis/publishing-addactions'] = array(
    'title' => 'PublishThis',
    'type' => MENU_CALLBACK,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('publishthis_addnew_publishingactions'),
    'access callback' => 'publishthis_administer_access',
    'access arguments' => array('administer'),
    'file' => 'publishthis.admin.publishingactions.inc',
    'file path' => drupal_get_path('module', 'publishthis') . '/admin',
  );

  $items['admin/config/publishthis/publishing-editactions/%'] = array(
    'title' => 'Publishing Actions',
    'type' => MENU_CALLBACK,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('edit_publishthis_publishing_actions'),
    'access callback' => 'publishthis_administer_access',
    'access arguments' => array('administer'),
    'file' => 'publishthis.admin.publishingactions.inc',
    'file path' => drupal_get_path('module', 'publishthis') . '/admin',
  );

  $items['publishthis/publishing-actions/delete/%'] = array(
    'title' => 'Publishing Actions Delete',
    'type' => MENU_CALLBACK,
    'page callback' => 'delete_publishthis_publishing_actions',
    'access callback' => 'publishthis_administer_access',
    'access arguments' => array('administer'),
    'file' => 'publishthis.admin.publishingactions.inc',
    'file path' => drupal_get_path('module', 'publishthis') . '/admin',
  );

  $items['admin/config/publishthis/log-messages'] = array(
    'title' => 'Publishing Log',
    'type' => MENU_LOCAL_TASK,
    'page callback' => 'publishthis_log_messages',
    'access callback' => 'publishthis_administer_access',
    'access arguments' => array('administer'),
    'file' => 'publishthis.admin.logmessages.inc',
    'file path' => drupal_get_path('module', 'publishthis') . '/admin',
    'weight' => 10
  );

  $items['publishthis/log-messages/delete/%'] = array(
    'title' => 'Log Messages Delete',
    'type' => MENU_CALLBACK,
    'page callback' => 'publishthis_log_messages_delete',
    'access callback' => 'publishthis_administer_access',
    'access arguments' => array('administer'),
    'file' => 'publishthis.admin.logmessages.inc',
    'file path' => drupal_get_path('module', 'publishthis') . '/admin',
  );

  $items['publishthis/log-messages/export/%'] = array(
    'title' => 'Export Log Messages',
    'type' => MENU_CALLBACK,
    'page callback' => 'publishthis_log_messages_export',
    'access callback' => 'publishthis_administer_access',
    'access arguments' => array('administer'),
    'file' => 'publishthis.admin.logmessages.inc',
    'file path' => drupal_get_path('module', 'publishthis') . '/admin',
  );

  // Get endpoint form settings
  $pt_value = unserialize(variable_get('pt_settings'));
  $endpoint = 'endpoint';
  if (isset($pt_value['endpoint']) && !empty($pt_value['endpoint'])) {
    $endpoint = substr(parse_url($pt_value['endpoint'], PHP_URL_PATH), 1);
    // Remove token, and replace it with menu parameter.
    $endpoint = substr($endpoint, 0, strrpos($endpoint, '/'));
  }
  $token_position = substr_count($endpoint, '/') + 1;

  $items[$endpoint . '/%'] = array(
    'title' => 'Endpoint',
    'page callback' => '_init_pt_endpoint',
    'page arguments' => array($token_position),
    'access callback' => TRUE,
  );

  return $items;
}

/**
 * Add administer publishThis access callback
 */
function publishthis_administer_access($op){

  switch ($op) {
    case 'administer':
      // Return true, if one of these permissions is granted
      if (user_access('administer site configuration') || user_access('administer publishthis module')) {
        return TRUE;
      }
      break;
  }
  return FALSE; // default

}

/**
 * Generate random endpoint
 */
function getRandomWord($len = 10) {
  $word = array_merge(range('a', 'z'), range('A', 'Z'));
  shuffle($word);
  return substr(implode($word), 0, $len);
}

/**
* Delete docid when node is deleted
*/
function publishthis_node_delete($node) {
  db_delete('pt_docid_links')->condition('nid', $node->nid)->execute();
}

/**
* Process CMS endpoint request
*/
function _init_pt_endpoint($token) {
  $objEndpoint = new Publishthis_Endpoint();
  $objEndpoint->process_request($token);
}