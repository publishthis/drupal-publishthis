<?php
if(!function_exists('pa')){
  function pa($mixed, $stop = false){
    $ar		= debug_backtrace();
    $key	= pathinfo($ar[0]['file']);
    $key	= $key['basename'] .':'. $ar[0]['line'];
    $print	= array($key => $mixed);
    echo '<pre>'. print_r($print, 1) .'</pre>';
    if ($stop == 1) exit();
  }
}

module_load_include('inc', 'publishthis_blocks', 'publishthis_blocks.block');

function publishthis_blocks_block_info(){
    $blocks['automated_feed'] = array(
	'info' => t('PublishThis: Automated Feed Content'),
    'mb_enabled' => TRUE,
    'cache' => DRUPAL_NO_CACHE
    );
    return $blocks;
}
function publishthis_blocks_block_configure($delta = ''){
 $form = array();
 $objAPI = new Publishthis_API();
 $feeds = $objAPI->get_feeds();
 $mixes = array();
  if(isset($feeds)){
    $mixes['-1'] = 'none';
    foreach ( $feeds as $feed ) {
      $skip = false;
      if(!$feed['automatedContentOn']) $skip = true;
      if(!$feed['automatedTwitterOn']) $skip = true;
      if(!$skip ) {
       $mixes[$feed['feedId']] = $feed['displayName'];
      }
    }
  }
  switch ($delta){
	case 'automated_feed':
    $form['automated_feed']['published_mixes'] = array(
		'#type' => 'select',
		'#title' => t('Published Mixes'),
		'#options' => $mixes,
		'#multiple' => false,
		'#required' => false,
		'#weight' => -18,
        '#default_value' => variable_get('published_mixes', ''),
	);
    $form['automated_feed']['mix_defaults'] = array(
        '#type'          => 'checkbox',
        '#title'         => t('Use Mix Defaults'),
        '#default_value' => variable_get('mix_defaults', '1'),
        '#description'   => t(''),
      );
      global $pt_sort_by;
      $form['automated_feed']['sort_mix'] = array(
        '#type'          => 'select',
        '#title'         => t('Sort By:'),
        '#options'       => $pt_sort_by,
        '#default_value' =>  variable_get('sort_mix', ''),
        );
      global $pt_cache_interval;
      $form['automated_feed']['cache_interval'] = array(
        '#type'          => 'select',
        '#title'         => t('Cache Interval:'),
        '#options'       => $pt_cache_interval,
        '#default_value' =>  variable_get('cache_interval', ''),
      );
      $form['automated_feed']['remove_duplicates'] = array(
        '#type'          => 'checkbox',
        '#title'         => t('Remove Duplicates'),
        '#default_value' => variable_get('remove_duplicates', '1'),
        '#description'   => t(''),
      );
      $form['automated_feed']['remove_related'] = array(
        '#type'          => 'checkbox',
        '#title'         => t('Remove Related'),
        '#default_value' =>  '1',
        '#default_value' => variable_get('remove_related', '1'),
      );
      global $pt_num_results;
      $form['automated_feed']['num_results'] = array(
        '#type'          => 'select',
        '#title'         => t('Number of Results to Display:'),
        '#options'       => $pt_num_results,
        '#prefix'        => '<h3>Layout Options</h3>',
        '#default_value' =>  variable_get('num_results', ''),
      );
      global $pt_call_options;
      foreach ( $pt_call_options as $key=>$val ) {
        $form['automated_feed'][$key] = array(
          '#type'          => 'checkbox',
          '#title'         => $val['label'],
          '#default_value' =>  variable_get($key, ''),
          '#description'   => t(''),
        );
      }
      $form['automated_feed']['show_photos'] = array(
        '#type'          => 'checkbox',
        '#title'         => t('Show Photos'),
        '#default_value' =>  variable_get('show_photos', '1'),
        '#prefix'  =>  '<h3>Image Options</h3>',
        '#description'   => t(''),
      );
      $form['automated_feed']['image_alignment'] = array(
        '#type'          => 'select',
        '#title'         => t('Images Alignment:'),
        '#options'       =>  array( "left" => "left", "center" => "center", "right" => "right" ),
        '#default_value' =>  variable_get('image_align', ''),
      );
      $form['automated_feed']['fields'] = _image_size_fields('Featured Image Size', '', '');
      break;
   }
   return $form;
}

function publishthis_blocks_block_save($delta = '', $edit = array()) {
    switch ($delta){
    case 'automated_feed':
      variable_set('published_mixes', $edit['published_mixes']);
      variable_set('mix_defaults', $edit['mix_defaults']);
      variable_set('remove_duplicates', $edit['remove_duplicates']);
      variable_set('remove_related', $edit['remove_related']);
      variable_set('sort_mix', $edit['sort_mix']);
      variable_set('cache_interval', $edit['cache_interval']);
      variable_set('num_results', $edit['num_results']);
      variable_set('show_photos', $edit['show_photos']);
      variable_set('image_align', $edit['image_alignment']);
      global $pt_call_options;
      foreach ( $pt_call_options as $key=>$val ) {
        variable_set($key, $edit[$key]);
      }
    break;
   }
}
function publishthis_blocks_block_view($delta = ''){
    $block = array();
    switch ($delta) {
	case 'automated_feed':
    $block['subject'] = t('automated_feed');
    $block['content'] = publishthis_automated_feed();
    break;
    }
    return $block;
}
