<?php
/**
 * Implements hook_menu().
 */
function publishthis_blocks_menu() {
  $items                                           = array();
  $items['admin/structure/block/instances']        = array(
    'title'            => 'Instances',
    'description'      => 'Create and delete instances of blocks.',
    'page callback'    => 'publishthis_blocks_general',
    'access callback'  => 'user_access',
    'access arguments' => array('administer blocks'),
    'type'             => MENU_LOCAL_TASK,
    'weight'           => -15,
  );
  $items['admin/structure/block/instances/delete'] = array(
    'title'            => 'Delete Block Instance',
    'page callback'    => 'drupal_get_form',
    'page arguments'   => array('publishthis_blocks_delete_form'),
    'access callback'  => 'user_access',
    'access arguments' => array('administer blocks'),
    'type'             => MENU_CALLBACK,
  );

  return $items;
}


module_load_include('inc', 'publishthis_blocks', 'publishthis_blocks.block');


function publishthis_blocks_block_info() {
  $blocks = publishthis_blocks_get_block(NULL);
  foreach ($blocks as $block) {
    $blocks[$block->delta] = array('info' => $block->title);

  }
  $blocks['automated_feed']   = array(
    'info'       => t('PublishThis: Automated Feed Content'),
    'mb_enabled' => TRUE,
    'cache'      => DRUPAL_NO_CACHE
  );
  $blocks['automated_tweets'] = array(
    'info'       => t('PublishThis: Automated Tweet Content'),
    'mb_enabled' => TRUE,
    'cache'      => DRUPAL_NO_CACHE
  );
  return $blocks;
}

/**
 * Fetch a given block from the pt_multiblock database table.
 *
 * @param $delta
 *   Optional. Retreive a single block based on this delta. If none specified,
 *   all multiblock instances are returned.
 * @param $reset
 *   Optional. Boolean value to reset the interal cache of this function.
 */
function publishthis_blocks_get_block($delta = NULL, $reset = FALSE) {
  static $blocks;

  if (!isset($blocks) || $reset) {
    $blocks = array();
    $result = db_query("SELECT * FROM {pt_multiblock}");
    foreach ($result as $row) {
      $blocks[$row->delta] = $row;
    }
  }

  return is_numeric($delta) ? $blocks[$delta] : $blocks;
}

/**
 * Dispatch a hook_block call to its respective module. Paramater $delta
 * is the new multiblock delta that we're using and $op is the op we are
 * dispatching.
 *
 * @param $delta
 *   The delta of the multiblock block, which is different from the delta
 *   of the block in the original module
 *
 * @param $op
 *   Can be configure, view, save...
 *
 * @edit
 *   Information originally passed to multiblock's corresponding hook.
 *   For example, a call to pt_multiblock_block_view($delta, $edit) will
 *   result in a call to pt_multiblock_call_block($delta, 'view', $edit).
 *   Note that Drupal's API does not call for $edit parameters for
 *   hook_node_view() or hook_node_configure(), but multiblock does.
 *
 * @return
 *   Information returned by the corresponding module_invoke() call.
 */
function publishthis_blocks_call_block($delta, $op, $edit) {
  $result = db_query("SELECT module, orig_delta, delta, multi_settings FROM {pt_multiblock} WHERE delta = :delta", array(
    ':delta' => $delta,
  ));

  if ($block_info = $result->fetchObject()) {
    // If this block is multiblock enabled, send it the delta of the block we're using.
    if ($block_info->multi_settings == 1) {
      $edit['multiblock_delta'] = array(
        '#type'  => 'value',
        '#value' => $block_info->delta,
      );
    }
    // This will result in a call to the original module's hook_block_view(),
    // hook_block_configure(), or hook_block_save() function. In cases where
    // modules define multiblock-enabled blocks (that is, in their
    // hook_block_info() function, they return an associative array of block
    // machine names to arrays with 'mb_enabled' => TRUE for each mb-enabled
    // block), these modules' hook_block_view() and hook_block_configure()
    // functions will have an extra $edit = array() parameter, in which
    // information about multiblock is passed. This will allow blocks to
    // contain and display different configuration information per instance.
    $block = module_invoke($block_info->module, 'block_' . $op, $block_info->orig_delta, $edit);
    return $block;
  }
  // No such multiblock, shouldn't ever happen.
  return;
}

/**
 * Page callback for the "Manage Block Instances page".
 */
function publishthis_blocks_general() {
  if (func_num_args() && func_get_arg(0) == 'edit' && is_numeric($instance = func_get_arg(1))) {
    $req_block = publishthis_blocks_get_block($instance);
  }
  // Fetch blocks directly from modules using block.module function.
  $blocks = _block_rehash();
  // Sort blocks how we want them.
  usort($blocks, 'publishthis_blocks_block_sort');

  // Fetch "Add Instance" form.
  if (isset($req_block)) {
    $get_form = drupal_get_form('publishthis_blocks_add_form', $blocks, $req_block);
    $form     = drupal_render($get_form);
  }
  else {
    $get_form = drupal_get_form('publishthis_blocks_add_form', $blocks);
    $form     = drupal_render($get_form);
  }

  // Get an array of existing blocks.
  $pt_multiblocks = publishthis_blocks_get_block(NULL, TRUE);
  return theme('publishthis_blocks_general', array(
    'add_block_form' => $form,
    'multiblocks'    => $pt_multiblocks,
    'edit'           => isset($req_block),
  ));
}

/**
 * "Add Instance" form.
 */
function publishthis_blocks_add_form($form, &$form_state, $blocks, $update = NULL) {
  $form['title'] = array(
    '#type'          => 'textfield',
    '#title'         => t('Instance Title'),
    '#maxlength'     => 256,
    '#required'      => TRUE,
    '#default_value' => (isset($update->title) ? $update->title : NULL),
  );
  if ($update) {
    $form['instance'] = array('#type' => 'value', '#value' => $update->delta);
  }
  else {
    // Turn $blocks into form options of block types.
    // Remember we need the module and delta to be able to tell what kind of
    // blocks we're talking about.
    $options = array();
    foreach ($blocks as $block) {
      if ($block['module'] != 'multiblock') {
        $options[$block['module'] . '***MB***' . $block['delta']] = $block['info'];
      }
    }
    $form['block'] = array(
      '#type'     => 'select',
      '#title'    => t('Block type'),
      '#options'  => $options,
      '#required' => TRUE,
    );
  }
  $form['submit'] = array(
    '#type'  => 'submit',
    '#value' => t('Save'),
  );
  return $form;
}

/**
 * Implements hook_block_view().
 */
function publishthis_blocks_block_view($delta = 0, $edit = array()) {
  if ($delta == 'automated_feed' || $delta == 'automated_tweets') {
    $block = array();
    switch ($delta) {
      case 'automated_feed':
        $block['subject'] = t('Automated Feed Content - PublishThis');
        $block['content'] = publishthis_automated_feed($edit);
        break;
      case 'automated_tweets':
        $block['subject'] = t('Automated Tweet Content - PublishThis');
        $block['content'] = publishthis_automated_tweets($edit);
        break;
    }
    return $block;
  }
  else {
    return publishthis_blocks_call_block($delta, 'view', $edit);
  }
}

/**
 * Implements hook_block_save().
 */
function publishthis_blocks_block_save($delta = 0, $edit = array()) {
  if ($delta == 'automated_feed' || $delta == 'automated_tweets') {
    if (isset($edit['multiblock_delta']['#value'])) {
      $id_block = $edit['multiblock_delta']['#value'];
    }
    else {
      $id_block = '';
    }
    switch ($delta) {
      case 'automated_feed':
        variable_set('published_mixes_' . $id_block, $edit['published_mixes']);
        variable_set('mix_defaults_' . $id_block, $edit['mix_defaults']);
        variable_set('remove_duplicates_' . $id_block, $edit['remove_duplicates']);
        variable_set('remove_related', $edit['remove_related']);
        variable_set('sort_mix_' . $id_block, $edit['sort_mix']);
        variable_set('cache_interval_' . $id_block, $edit['cache_interval']);
        variable_set('num_results_' . $id_block, $edit['num_results']);
        variable_set('show_photos_' . $id_block, $edit['show_photos']);
        variable_set('image_align_' . $id_block, $edit['image_alignment']);
        variable_set('image_size_' . $id_block, $edit['image_size']);
        variable_set('image_width_' . $id_block, $edit['image_width']);
        variable_set('image_height_' . $id_block, $edit['image_height']);
        variable_set('image_maxwidth_' . $id_block, $edit['image_maxwidth']);
        global $pt_call_options;
        foreach ($pt_call_options as $key => $val) {
          variable_set($key . '_' . $id_block, $edit[$key]);
        }
        break;
      case 'automated_tweets':
        variable_set('published_mixes_tweets_' . $id_block, $edit['published_mixes_tweets']);
        variable_set('mix_defaults_tweets_' . $id_block, $edit['mix_defaults_tweets']);
        variable_set('sort_mix_tweets_' . $id_block, $edit['sort_mix_tweets']);
        variable_set('cache_interval_tweets_' . $id_block, $edit['cache_interval_tweets']);
        variable_set('num_results_tweets_' . $id_block, $edit['num_results_tweets']);
        break;
    }
  }
  else {
    return publishthis_blocks_call_block($delta, 'save', $edit);
  }

}

/**
 * Implements hook_block_configure().
 */
function publishthis_blocks_block_configure($delta = 0, $edit = array()) {
  if ($delta == 'automated_feed' || $delta == 'automated_tweets') {
    if (isset($edit['multiblock_delta']['#value'])) {
      $id_block = $edit['multiblock_delta']['#value'];
    }
    else {
      $id_block = '';
    }
    $form   = array();
    $objAPI = new Publishthis_API();
    $feeds  = $objAPI->get_feeds();
    $mixes  = array();
    if (isset($feeds)) {
      $mixes['-1'] = 'none';
      foreach ($feeds as $feed) {
        $skip = FALSE;
        if (!$feed['automatedContentOn']) {
          $skip = TRUE;
        }
        if (!$feed['automatedTwitterOn']) {
          $skip = TRUE;
        }
        if (!$skip) {
          $mixes[$feed['feedId']] = $feed['displayName'];
        }
      }
    }
    switch ($delta) {

      case 'automated_feed':
        $form['automated_feed']['published_mixes'] = array(
          '#type'          => 'select',
          '#title'         => t('Published Mixes'),
          '#options'       => $mixes,
          '#multiple'      => FALSE,
          '#required'      => FALSE,
          '#weight'        => -18,
          '#default_value' => variable_get('published_mixes_' . $id_block, ''),
        );
        $form['automated_feed']['mix_defaults']    = array(
          '#type'          => 'checkbox',
          '#title'         => t('Use Mix Defaults'),
          '#default_value' => variable_get('mix_defaults_' . $id_block, '1'),
          '#description'   => t(''),
        );
        global $pt_sort_by;
        $form['automated_feed']['sort_mix'] = array(
          '#type'          => 'select',
          '#title'         => t('Sort By:'),
          '#options'       => $pt_sort_by,
          '#default_value' => variable_get('sort_mix_' . $id_block, ''),
        );
        global $pt_cache_interval;
        $form['automated_feed']['cache_interval']    = array(
          '#type'          => 'select',
          '#title'         => t('Cache Interval:'),
          '#options'       => $pt_cache_interval,
          '#default_value' => variable_get('cache_interval_' . $id_block, ''),
        );
        $form['automated_feed']['remove_duplicates'] = array(
          '#type'          => 'checkbox',
          '#title'         => t('Remove Duplicates'),
          '#default_value' => variable_get('remove_duplicates_' . $id_block, '1'),
          '#description'   => t(''),
        );
        $form['automated_feed']['remove_related']    = array(
          '#type'          => 'checkbox',
          '#title'         => t('Remove Related'),
          '#default_value' => '1',
          '#default_value' => variable_get('remove_related_' . $id_block, '1'),
        );
        global $pt_num_results;
        $form['automated_feed']['num_results'] = array(
          '#type'          => 'select',
          '#title'         => t('Number of Results to Display:'),
          '#options'       => $pt_num_results,
          '#prefix'        => '<h3>Layout Options</h3>',
          '#default_value' => variable_get('num_results_' . $id_block, ''),
        );
        global $pt_call_options;
        foreach ($pt_call_options as $key => $val) {
          $form['automated_feed'][$key] = array(
            '#type'          => 'checkbox',
            '#title'         => $val['label'],
            '#default_value' => variable_get($key . '_' . $id_block, ''),
            '#description'   => t(''),
          );
        }
        $form['automated_feed']['show_photos']     = array(
          '#type'          => 'checkbox',
          '#title'         => t('Show Photos'),
          '#default_value' => variable_get('show_photos_' . $id_block, '1'),
          '#prefix'        => '<h3>Image Options</h3>',
          '#description'   => t(''),
        );
        $form['automated_feed']['image_alignment'] = array(
          '#type'          => 'select',
          '#title'         => t('Images Alignment:'),
          '#options'       => array(
            "left"   => "left",
            "center" => "center",
            "right"  => "right"
          ),
          '#default_value' => variable_get('image_align_' . $id_block, ''),
        );
        $form['automated_feed']['outerdiv_open']   = array(
          '#prefix' => '<div class ="field_inline image_field_style check-for-int">',
        );

        $form['automated_feed']['image_size']    = array(
          '#type'          => 'radios',
          '#title'         => t('Theme default'),
          '#options'       => array(
            'theme_default'    => t('Theme default'),
            'custom'           => t('Width'),
            'custom_max_width' => t('Max Width')
          ),
          '#default_value' => variable_get('image_size_' . $id_block, 'theme_default'),
          '#description'   => t(''),
          '#prefix'        => '<div class ="featured-image-box">',
        );
        $form['automated_feed']['innerdiv_open'] = array(
          '#suffix' => '<div class ="field_inline image_text_fields">',
        );
        // Width
        $form['automated_feed']['image_width'] = array(
          '#type'          => 'textfield',
          '#prefix'        => '<div class ="image_width_style">',
          '#size'          => 5,
          '#default_value' => variable_get('image_width_' . $id_block, '0'),
        );

        $form['automated_feed']['image_height'] = array(
          '#type'          => 'textfield',
          '#title'         => t('Height'),
          '#size'          => 5,
          '#default_value' => variable_get('image_height_' . $id_block, '0'),
          '#suffix'        => '</div>',
        );
        // Max Width
        $form['automated_feed']['image_maxwidth'] = array(
          '#type'          => 'textfield',
          '#size'          => 5,
          '#default_value' => variable_get('image_maxwidth_' . $id_block, '300'),
          '#suffix'        => '</div>'
        );
        $form['automated_feed']['div_close']      = array(
          '#suffix' => '</div></div>'
        );

        break;
      case 'automated_tweets':
        $form['automated_tweets']['published_mixes_tweets'] = array(
          '#type'          => 'select',
          '#title'         => t('Published Mixes'),
          '#options'       => $mixes,
          '#multiple'      => FALSE,
          '#required'      => FALSE,
          '#weight'        => -18,
          '#default_value' => variable_get('published_mixes_tweets_' . $id_block, ''),
        );
        $form['automated_tweets']['mix_defaults_tweets']    = array(
          '#type'          => 'checkbox',
          '#title'         => t('Use Mix Defaults'),
          '#default_value' => variable_get('mix_defaults_tweets_' . $id_block, '1'),
          '#description'   => t(''),
        );
        global $pt_sort_by;
        $form['automated_tweets']['sort_mix_tweets'] = array(
          '#type'          => 'select',
          '#title'         => t('Sort By:'),
          '#options'       => $pt_sort_by,
          '#default_value' => variable_get('sort_mix_tweets_' . $id_block, ''),
        );
        global $pt_cache_interval;
        $form['automated_tweets']['cache_interval_tweets'] = array(
          '#type'          => 'select',
          '#title'         => t('Cache Interval:'),
          '#options'       => $pt_cache_interval,
          '#default_value' => variable_get('cache_interval_tweets_' . $id_block, ''),
        );
        global $pt_num_results;
        $form['automated_tweets']['num_results_tweets'] = array(
          '#type'          => 'select',
          '#title'         => t('Number of Results to Display:'),
          '#options'       => $pt_num_results,
          '#default_value' => variable_get('num_results_tweets_' . $id_block, ''),
        );
        break;
    }
    return $form;
  }
  else {

    return publishthis_blocks_call_block($delta, 'configure', $edit);
  }

}


function publishthis_blocks_delete_form($form, $form_state, $delta) {
  $block = publishthis_blocks_get_block($delta);

  if (empty($block)) {
    drupal_set_message(t('The multiblock with the delta @delta was not found.', array('@delta' => $delta)), 'error');
    return array();
  }

  $form['delta'] = array('#type' => 'value', '#value' => $delta);
  return confirm_form($form,
    t('Delete the block instance %title?', array('%title' => $block->title)),
    'admin/structure/block/instances',
    t('This will delete the instance of the block %title.', array('%title' => $block->title)),
    t('Delete'), t('Cancel'));
}

function publishthis_blocks_delete_form_submit($form, &$form_state) {
  if (publishthis_blocks_delete($form_state['values']['delta'])) {
    drupal_set_message(t('Block successfully deleted!'));
  }
  else {
    drupal_set_message(t('There was a problem deleting the block'));
  }
  $form_state['redirect'] = 'admin/structure/block/instances';
}


/**
 * Add a multiblock instance.
 *
 * @param $original_block
 *   The original block for which an instance is being created.
 * @param $block_instance
 *   An object contain information about the particular block instance.
 *
 * @return
 *   The delta of the newly added block.
 */
function publishthis_blocks_add($original_block, $block_instance) {
  // Create new delta for block instance.
  $record = array(
    'title'          => $block_instance->title,
    'module'         => $original_block->module,
    'orig_delta'     => $original_block->delta,
    'multi_settings' => $block_instance->mb_enabled,
  );
  drupal_write_record('pt_multiblock', $record);
  return $record['delta'];
}

/**
 * Delete a multiblock instance.
 */
function publishthis_blocks_delete($pt_multiblock_delta) {
  // Remove instance from multiblock's storage.
  $num_deleted = db_delete('pt_multiblock')
    ->condition('delta', (int) $pt_multiblock_delta)
    ->execute();
  // Remove block instances from the block modules tables to avoid orphans.
  db_delete('block')
    ->condition('module', 'pt_multiblock')
    ->condition('delta', (int) $pt_multiblock_delta)
    ->execute();
  db_delete('block_role')
    ->condition('module', 'pt_multiblock')
    ->condition('delta', (int) $pt_multiblock_delta)
    ->execute();
  if (ctype_digit($pt_multiblock_delta) && $num_deleted) {
    _block_rehash();
    return TRUE;
  }
  else {
    return FALSE;
  }
}


/**
 * Validate "Add Block Instance" form.
 */
function publishthis_blocks_add_form_validate($form, &$form_state) {
  if (!isset($form_state['values']['instance'])) {
    // Make sure we are getting a valid block to add.
    if (!preg_match('/^.+\*\*\*MB\*\*\*.+$/', $form_state['values']['block'])) {
      form_set_error('block', t('Bad block module input, contact administrator'));
      return;
    }
    // Make sure the block and delta exist.
    $orig_block = publishthis_blocks_blockinfo_from_form($form_state['values']['block']);
    if (!module_hook($orig_block['module'], 'block_info') ||
        !array_key_exists($orig_block['delta'], module_invoke($orig_block['module'], 'block_info'))
    ) {
      form_set_error('block', t('Module or block doesn\'t exist, contact administrator'));
    }
  }
}


/**
 * Add block instance to database from "Add Block Instance" form.
 */
function publishthis_blocks_add_form_submit($form, &$form_state) {
  if (isset($form_state['values']['instance'])) {
    $num_updated = db_update('pt_multiblock')
      ->fields(array(
        'title' => $form_state['values']['title'],
      ))
      ->condition('delta', $form_state['values']['instance'], '=')
      ->execute();

    $block = publishthis_blocks_get_block($form_state['values']['instance'], TRUE);

    $cache = db_query('SELECT cache FROM {block} WHERE module = :module AND delta = :orig_delta', array(
      ":module"     => $block->module,
      ":orig_delta" => $block->orig_delta
    ))->fetchField();

    if ($cache) {
      db_query('UPDATE {block} SET cache = :cache WHERE delta = :delta AND module = :pt_multiblock', array(
        ':cache'         => $cache,
        ':delta'         => $block->delta,
        ':pt_multiblock' => 'pt_multiblock'
      ));
    }

    $form_state['redirect'] = 'admin/structure/block/instances';
    return;
  }

  // Get the original block info.
  $orig_block = publishthis_blocks_blockinfo_from_form($form_state['values']['block']);
  // Check whether this module is multiblock enabled.
  $block_info = module_invoke($orig_block['module'], 'block_info');
  $mb_enabled = (int) (!empty($block_info[$orig_block['delta']]['mb_enabled']) && $block_info[$orig_block['delta']]['mb_enabled'] == TRUE);
  // Create block instance information.
  $orig_block = (object) $orig_block;
  $instance   = (object) array(
    'title'      => $form_state['values']['title'],
    'mb_enabled' => $mb_enabled
  );
  // Add the block instance.
  publishthis_blocks_add($orig_block, $instance);
  drupal_set_message(t('Block instance %instance created.', array('%instance' => $form_state['values']['title'])));
}

/**
 * Custom sort based on info element of array.
 */
function publishthis_blocks_block_sort($a, $b) {
  return strcmp($a['info'], $b['info']);
}

/**
 * Get the module and delta from the "Add Block Instance" block form element.
 */
function publishthis_blocks_blockinfo_from_form($form_value) {
  $matches = array();
  preg_match('/^(.+)\*\*\*MB\*\*\*(.+)$/', $form_value, $matches);
  return array('module' => $matches[1], 'delta' => $matches[2]);
}

/**
 * Get title of a block by its module and delta.
 */
function  publishthis_blocks_get_block_title($module, $delta) {
  $block_info = module_invoke($module, 'block_info', $delta);
  return $block_info[$delta]['info'];
}

/**
 * Implementation of hook_theme().
 */
function publishthis_blocks_theme() {
  return array(
    'publishthis_blocks_general' => array(
      'arguments' => array(
        'add_block_form' => NULL,
        'pt_multiblocks' => NULL,
        'edit'           => NULL
      ),
    ),
  );
}

/**
 * Theme function for the "Manage Block Instances" page.
 */
function theme_publishthis_blocks_general($variables) {

  extract($variables, EXTR_SKIP);
  $output = '';
  $noyes  = array('misc/watchdog-error.png', 'misc/watchdog-ok.png');

  $output .= '<p><h3>' . ($edit ? t('Edit Instance') : t('Add Instance')) . '</h3>' . $add_block_form . '</p>';

  $header = array(
    t('Title'),
    t('Original Block Title'),
    t('Original Module'),
    t('MultiBlock Enabled'),
    t('Original Delta'),
    t('Action')
  );

  $rows = array();
  foreach ($multiblocks as $row) {
    $ops_link   = l(t('Edit'), 'admin/structure/block/instances/edit/' . $row->delta)
                  . ' ' . l(t('Delete'), 'admin/structure/block/instances/delete/' . $row->delta);
    $title      = publishthis_blocks_get_block_title($row->module, $row->orig_delta);
    $mb_enabled = $noyes[$row->multi_settings];
    $alt        = t('Not Multiblock enabled');
    if ($row->multi_settings) {
      $alt = t('Multiblock enabled');
    }
    $rows[] = array(
      check_plain($row->title),
      check_plain($title),
      $row->module,
      array(
        'data'  => theme('image', array(
          'path'  => $mb_enabled,
          'alt'   => $alt,
          'title' => $alt
        )),
        'align' => 'center'
      ),
      $row->orig_delta,
      $ops_link,
    );
  }

  $output .= '<p><h3>' . t('Manage Instances') . '</h3>';
  if (!empty($rows)) {
    $output .= theme('table', array('header' => $header, 'rows' => $rows));
  }
  else {
    $output .= t('No instances defined yet.');
  }
  $output .= '</p>';

  return $output;
}
